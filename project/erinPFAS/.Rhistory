ggplot()+
geom_sf(aes(fill=percent_bach, color = city), lwd = 0.4)+
geom_sf(data = roads_sub, fill = "gray",color = "gray", lwd= 0.5)+
theme_classic()+
scale_color_manual(values = c("goldenrod", "forestgreen"))+
labs(title = "MSP census tract gentrification status in 2020", fill = "Gentrifiable", x = "", y = "", color = "City")+
annotate("point", x = -93.1691, y = 44.938, colour = "white", size = 1) +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_markdown(family = "mono"),
plot.title.position = "plot",
plot.title = element_markdown(family = "mono", size = 12))+
annotate(geom = "text", x = -93.1691, y = 44.945, label = "Macalester \nCollege", size = 2, color = "white")+
guides(color = guide_legend(override.aes = list(size=2,alpha=1)))
gentrifiable %>%
mutate(propbachelors2010 = bachelors_2010/population_2010,
propbachelors2020 = bachelors_2020/population_2020,
change_bachelors = propbachelors2020 - propbachelors2010,
percent_rent_increase = (medContractRent_2020 - medContractRent_2010)/(medContractRent_2010),
percent_homevalue_increase = (medianHomeValue_2020 - medianHomeValue_2010)/medianHomeValue_2010,
gentrified = as.factor(case_when((canGent2010 == "No" & city == "Minneapolis" & change_bachelors > 0.03941054 &
(percent_rent_increase > 0.3259020 | percent_homevalue_increase >0.16874041)) |
(canGent2010 == "No" & city == "Saint Paul" & change_bachelors > 0.01854539 &
(percent_rent_increase > 0.3811 | percent_homevalue_increase > 0.05902)) ~ 1,
TRUE ~ 0))) %>%
filter(gentrified == 1)
gentrifiable
gentrifiable %>%
count(canGent2010)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(spdep)
library(CARBayes)
load("Data/CrimeCleaned/tract_aggregated_minneapolis.RData")
load("Data/CrimeCleaned/tract_aggregated_sp.RData")
load("Data/CrimeCleaned/tract_aggregated_no_auto.RData")
crimes_wide_minn <- tract_aggregated %>%
st_drop_geometry() %>%
pivot_wider(id_cols = c(tractmod:canGent_gentrified),names_from = year, values_from = c(Theft, Violent, violent_per_1000, theft_per_1000))
crimes_wide_minn$canGent_gentrified <- relevel(crimes_wide_minn$canGent_gentrified, ref = "Could, but didn't gentrify")
crimes_wide_no_auto <- tract_aggregated_no_auto %>%
st_drop_geometry() %>%
pivot_wider(id_cols = c(tractmod:canGent_gentrified),names_from = year, values_from = c(Theft, Violent))
crimes_wide_no_auto$canGent_gentrified <- relevel(crimes_wide_no_auto$canGent_gentrified, ref = "Could, but didn't gentrify")
crimes_wide_sp <- tract_aggregated_sp %>%
st_drop_geometry() %>%
pivot_wider(id_cols = c(tractmod:canGent_gentrified),names_from = year, values_from = c(Theft, Violent))
crimes_wide_sp$canGent_gentrified <- relevel(crimes_wide_sp$canGent_gentrified, ref = "Could, but didn't gentrify")
minn_violent19 <- glm(Violent_2019 ~ canGent_gentrified + Violent_2010 + offset(log(population_2020)),
data = crimes_wide_minn, family = poisson(link=log))
summary(minn_violent19)
minn_violent20 <- glm(Violent_2020 ~ canGent_gentrified + Violent_2010 + offset(log(population_2020)),
data = crimes_wide_minn, family = poisson(link=log))
summary(minn_violent20)
confint(minn_violent20)
minn_violent22 <- glm(Violent_2022 ~ canGent_gentrified + Violent_2010 + offset(log(population_2020)),
data = crimes_wide_minn, family = poisson(link=log))
summary(minn_violent22)
confint(minn_violent22)
minn_violent19_quasi <- glm(Violent_2019 ~ canGent_gentrified + Violent_2010 + offset(log(population_2020)),
data = crimes_wide_minn, family = quasipoisson(link=log))
summary(minn_violent19_quasi)
minn_violent20_quasi <- glm(Violent_2020 ~ canGent_gentrified + Violent_2010 + offset(log(population_2020)),
data = crimes_wide_minn, family = quasipoisson(link=log))
summary(minn_violent20_quasi)
confint(minn_violent20_quasi)
minn_violent22_quasi <- glm(Violent_2022 ~ canGent_gentrified + Violent_2010 + offset(log(population_2020)),
data = crimes_wide_minn, family = quasipoisson(link=log))
summary(minn_violent22_quasi)
violent2020 <- tract_aggregated %>%
st_drop_geometry() %>%
filter(year == 2020) %>%
rename("Violent_2020" = "Violent") %>%
dplyr::select(Violent_2020)
theft2020 <- tract_aggregated %>%
st_drop_geometry() %>%
filter(year == 2020) %>%
rename("Theft_2020" = "Theft") %>%
dplyr::select(Theft_2020)
min <- tract_aggregated %>%
filter(year == 2010) %>%
rename("Violent_2010" = "Violent",
"Theft_2010" = "Theft") %>%
cbind(violent2020, theft2020)
min$canGent_gentrified <- relevel(min$canGent_gentrified, ref = "Could, but didn't gentrify")
violent2022 <- tract_aggregated %>%
st_drop_geometry() %>%
filter(year == 2022) %>%
rename("Violent_2022" = "Violent") %>%
dplyr::select(Violent_2022)
theft2022 <- tract_aggregated %>%
st_drop_geometry() %>%
filter(year == 2022) %>%
rename("Theft_2022" = "Theft") %>%
dplyr::select(Theft_2022)
min2022 <- tract_aggregated %>%
filter(year == 2010) %>%
rename("Violent_2010" = "Violent",
"Theft_2010" = "Theft") %>%
cbind(violent2022, theft2022)
min2022$canGent_gentrified <- relevel(min2022$canGent_gentrified, ref = "Could, but didn't gentrify")
#check ORIGINAL residuals for autocorrelation
Queen <- poly2nb(min, queen=TRUE)
min$residualsOriginal <- resid(minn_violent20)
min %>%
ggplot()+
geom_sf(aes(fill = residualsOriginal))+
scale_fill_gradient2(mid = "white", high = "red", low = "blue")+
labs(title = "Original Poisson model residuals", fill = "Number crimes")+
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
plot.title = element_text(hjust=0.5))
spdep::moran.test(min$residualsOriginal, nb2listw(Queen, style = "B"), randomisation = FALSE, alternative = "two.sided")
#check ORIGINAL residuals for autocorrelation
Queen <- poly2nb(min, queen=TRUE)
min$residualsOriginal <- resid(minn_violent20)
min %>%
ggplot()+
geom_sf(aes(fill = residualsOriginal))+
scale_fill_gradient2(mid = "white", high = "red", low = "blue")+
labs(title = "Poisson", fill = "Number crimes")+
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
plot.title = element_text(hjust=0.5))
spdep::moran.test(min$residualsOriginal, nb2listw(Queen, style = "B"), randomisation = FALSE, alternative = "two.sided")
W <- nb2mat(Queen, style = "B", zero.policy = TRUE)
Z <- matrix(0.01, ncol = 115, nrow = 115) - diag(.01, ncol = 115, nrow = 115)
minn_violent20_spatial <- S.CARdissimilarity(formula = Violent_2020 ~ canGent_gentrified + Violent_2010 + offset(log(population_2020)), data = min, family = "poisson", W=W, Z=list(Z=Z), W.binary =TRUE, burnin=30000, n.sample = 100000, thin=20)
minn_violent20_spatial <- S.CARdissimilarity(formula = Violent_2020 ~ canGent_gentrified + Violent_2010 + offset(log(population_2020)), data = min, family = "poisson", W=W, Z=list(Z=Z), W.binary =TRUE, burnin=30000, n.sample = 100000, thin=20)
minn_violent20_spatial
#check ORIGINAL residuals for autocorrelation
Queen <- poly2nb(min, queen=TRUE)
min$residualsOriginal <- resid(minn_violent20)
min %>%
ggplot()+
geom_sf(aes(fill = residualsOriginal))+
scale_fill_gradient2(mid = "white", high = "red", low = "blue")+
labs(title = "Poisson", fill = "Residual")+
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
plot.title = element_text(hjust=0.5))
spdep::moran.test(min$residualsOriginal, nb2listw(Queen, style = "B"), randomisation = FALSE, alternative = "two.sided")
min$spatial_violent_resid <- resid(minn_violent20_spatial, type = "response")
spdep::moran.test(min$spatial_violent_resid, nb2listw(Queen, style = "B"), alternative = "two.sided")
min %>%
ggplot()+
geom_sf(aes(fill = spatial_violent_resid))+
scale_fill_gradient2(mid = "white", high = "red", low = "blue")+
labs(title = "Spatial Poisson", fill = "Residual")+
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
plot.title = element_text(hjust=0.5))
minn_theft19 <- glm(Theft_2019 ~ canGent_gentrified + Theft_2010 + offset(log(population_2020)),
data = crimes_wide_minn, family = poisson(link=log))
summary(minn_theft19)
minn_theft20 <- glm(Theft_2020 ~ canGent_gentrified + Theft_2010 + offset(log(population_2020)),
data = crimes_wide_minn, family = poisson(link=log))
summary(minn_theft20)
confint(minn_theft20)
minn_theft22 <- glm(Theft_2022 ~ canGent_gentrified + Theft_2010 + offset(log(population_2020)),
data = crimes_wide_minn, family = poisson(link=log))
summary(minn_theft22)
minn_theft19_quasi <- glm(Theft_2019 ~ canGent_gentrified + Theft_2010 + offset(log(population_2020)),
data = crimes_wide_minn, family = quasipoisson(link=log))
summary(minn_theft19_quasi)
minn_theft20_quasi <- glm(Theft_2020 ~ canGent_gentrified + Theft_2010 + offset(log(population_2020)),
data = crimes_wide_minn, family = quasipoisson(link=log))
summary(minn_theft20_quasi)
confint(minn_theft20_quasi)
minn_theft22_quasi <- glm(Theft_2022 ~ canGent_gentrified + Theft_2010 + offset(log(population_2020)),
data = crimes_wide_minn, family = quasipoisson(link=log))
summary(minn_theft22_quasi)
#check original for spatial autocorrelation
min$residualsOriginal_theft <- resid(minn_theft20)
min %>%
ggplot()+
geom_sf(aes(fill = residualsOriginal_theft))+
scale_fill_gradient2(mid = "white", high = "red", low = "blue")+
theme_classic()+
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
plot.title.position = "plot",
plot.title = element_text(family = "mono", size = 10, hjust=0.5),
legend.text = element_text(family = "mono"),
legend.title = element_text(family = "mono", size=9))+
labs(title = "Poisson", fill = "Residual")
spdep::moran.test(min$residualsOriginal_theft, nb2listw(Queen, style = "B"), randomisation = FALSE, alternative = "two.sided")
min %>%
ggplot()+
geom_sf(aes(fill = residualsOriginal_theft))+
scale_fill_gradient2(mid = "white", high = "red", low = "blue")+
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
plot.title.position = "plot",
plot.title = element_text(family = "mono", size = 10, hjust=0.5),
legend.text = element_text(family = "mono"),
legend.title = element_text(family = "mono", size=9))+
labs(title = "Poisson", fill = "Residual")
min %>%
ggplot()+
geom_sf(aes(fill = residualsOriginal_theft))+
scale_fill_gradient2(mid = "white", high = "red", low = "blue")+
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
plot.title.position = "plot",
plot.title = element_text(hjust=0.5))+
labs(title = "Poisson", fill = "Residual")
minn_theft20_spatial <- S.CARdissimilarity(formula = Theft_2020 ~ canGent_gentrified + Theft_2010 + offset(log(population_2020)), data = min, family = "poisson", W=W, Z=list(Z=Z), W.binary =TRUE, burnin=30000, n.sample = 100000, thin=20)
minn_theft20_spatial
min$spatial_theft_resid <- resid(minn_theft20_spatial, type = "response")
spdep::moran.test(min$spatial_theft_resid, nb2listw(Queen, style = "B"), alternative = "two.sided")
min %>%
ggplot()+
geom_sf(aes(fill = spatial_theft_resid))+
scale_fill_gradient2(mid = "white", high = "red", low = "blue")+
theme_classic()+
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
plot.title.position = "plot",
plot.title = element_text(family = "mono", hjust=0.5, size=10),
legend.text = element_text(family = "mono"),
legend.title = element_text(family = "mono", size=9))+
labs(title = "Spatial", fill = "Residual")
min %>%
ggplot()+
geom_sf(aes(fill = spatial_theft_resid))+
scale_fill_gradient2(mid = "white", high = "red", low = "blue")+
theme_classic()+
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
plot.title.position = "plot",
plot.title = element_text(hjust=0.5))+
labs(title = "Spatial", fill = "Residual")
min %>%
ggplot()+
geom_sf(aes(fill = spatial_theft_resid))+
scale_fill_gradient2(mid = "white", high = "red", low = "blue")+
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
plot.title.position = "plot",
plot.title = element_text(hjust=0.5))+
labs(title = "Spatial", fill = "Residual")
min %>%
ggplot()+
geom_sf(aes(fill = spatial_theft_resid))+
scale_fill_gradient2(mid = "white", high = "red", low = "blue")+
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
plot.title.position = "plot",
plot.title = element_text(hjust=0.5))+
labs(title = "Spatial Poisson", fill = "Residual")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidygeocoder)
library(sf)
saintpaulcrime <- read_csv("Data/Crime/Crime_Incident_Report_2023.csv")
load('Data/tractData/cleaned/gent_clean.RData')
saintpaulcrime <- saintpaulcrime %>%
mutate(year = as.numeric(substr(DATE, 1, 4))) %>%
filter(year != 2014, year!=2023) %>%
mutate(OffenseCat = case_when(INCIDENT %in% c("Theft", "Burglary", "Vandalism", "Narcotics", "Criminal Damage", "Graffiti", "THEFT") ~ "Theft",
INCIDENT == "Auto Theft" ~ "Auto Theft",
INCIDENT %in% c("Simple Asasult Dom.", "Robbery", "Agg. Assault", "Agg. Assault Dom.", "Rape", "Arson", "Simple Assault Dom.", "Simple Assault Dom", "Homicide", "Agg. Assault Dom") ~ "Violent",
TRUE ~ "random")) %>%
filter(OffenseCat != "random")
#total number of incidents
saintpaulcrime %>%
distinct(CASE_NUMBER) %>%
count()
read_csv("Data/Crime/Crime_Incident_Report_2023.csv") %>%
mutate(year = as.numeric(substr(DATE, 1, 4))) %>%
filter(year != 2014, year!=2023) %>%
mutate(OffenseCat = case_when(INCIDENT %in% c("Theft", "Burglary", "Vandalism", "Narcotics", "Criminal Damage", "Graffiti", "THEFT") ~ "Theft",
INCIDENT == "Auto Theft" ~ "Auto Theft",
INCIDENT %in% c("Simple Asasult Dom.", "Robbery", "Agg. Assault", "Agg. Assault Dom.", "Rape", "Arson", "Simple Assault Dom.", "Simple Assault Dom", "Homicide", "Agg. Assault Dom") ~ "Violent",
TRUE ~ "random")) %>%
filter(OffenseCat == "random") %>%
distinct(CASE_NUMBER, .keep_all = TRUE) %>%
count(INCIDENT)
knitr::opts_chunk$set(echo = TRUE)
# Libraries
library(tidyverse)
library(NatParksPalettes)
library(PrettyCols)
library(ggmap)
library(sf)
library(viridis)
load('Data/tractData/cleaned/gent_clean.RData')
roads <- st_read("ShpData/tl_2019_27_prisecroads")
#Minneapolis
load("Data/Crime/minneapolisCrime.RData")
load('Data/CrimeCleaned/tract_aggregated_minneapolis.RData')
load('Data/CrimeCleaned/tract_points_minneapolis.RData')
load('Data/CrimeCleaned/tract_aggregated_no_auto.RData')
#Saint Paul
load('Data/CrimeCleaned/tract_aggregated_sp.RData')
load("Data/CrimeCleaned/tract_points_sp.RData")
tract_aggregated <- tract_aggregated %>%
group_by(tractmod) %>%
mutate(yearly_dif = (population_2020 - population_2010)/10,
year = as.numeric(year),
pop_apprx = case_when(year %in% 2010:2019 ~ population_2010 + yearly_dif*(year-2010),
TRUE ~ population_2020),
violent_1000_apprx = 1000*(Violent/pop_apprx),
theft_1000_apprx = 1000*(Theft/pop_apprx)) %>%
ungroup()
tract_aggregated_no_auto <- tract_aggregated_no_auto %>%
group_by(tractmod) %>%
mutate(yearly_dif = (population_2020 - population_2010)/10,
year = as.numeric(year),
pop_apprx = case_when(year %in% 2010:2019 ~ population_2010 + yearly_dif*(year-2010),
TRUE ~ population_2020),
violent_1000_apprx = 1000*(Violent/pop_apprx),
theft_1000_apprx = 1000*(Theft/pop_apprx)) %>%
ungroup()
tract_aggregated_sp <- tract_aggregated_sp %>%
group_by(tractmod) %>%
mutate(yearly_dif = (population_2020 - population_2010)/10,
year = as.numeric(year),
pop_apprx = case_when(year %in% 2010:2019 ~ population_2010 + yearly_dif*(year-2010),
TRUE ~ population_2020),
violent_1000_apprx = 1000*(Violent/pop_apprx),
theft_1000_apprx = 1000*(Theft/pop_apprx)) %>%
ungroup()
minneapolisCrime <- minneapolisCrime %>%
filter(year != 2023) %>%
mutate(offenseCat = case_when(Offense %in% c("THEFT", "TFMV", "BURGD", "AUTOTH", "BURGB", "BIKETF", "TMVP", "THFTSW", "SHOPLF", "TFPER", "TBLDG", "CARJCK", "MVTHFT", "COINOP", "SCRAP", "POCKET", "PETIT", "PKGTHEFT", "LOOT") ~ "Theft",
Offense %in% c("ASLT2", "ROBPER", "CSCR", "DASTR", "DASLT2", "ASLT3", "ROBBIZ", "ROBPAG", "ARSON", "ASLT4", "DASLT3", "MURDR", "ASLT1", "ADLTTN", "DASLT1", "DISARM", "ABSVAR") ~ "Violent",
TRUE ~ "random")) %>%
filter(offenseCat != "random")
minneapolisCrime %>%
filter(offenseCat != "random") %>%
mutate(OffenseGroup = case_when(Offense %in% c("AUTOTH", "TMVP", "CARJCK", "MVTHFT") ~ "Auto Theft",
Offense %in% c("THEFT", "TFMV", "BURGD", "BURGB", "BIKETF", "THFTSW", "SHOPLF", "TFPER", "TBLDG", "COINOP", "SCRAP", "POCKET", "PETIT", "PKGTHEFT", "LOOT") ~ "Theft (no auto)",
TRUE ~ "Violent")) %>%
count(OffenseGroup, year) %>%
ggplot(aes(x=as.numeric(year), y=n, color = OffenseGroup))+
geom_point()+
geom_line()+
scale_x_continuous(breaks = c(2010, 2012, 2014, 2016, 2018, 2020, 2022))+
scale_y_continuous(labels = scales::comma)+
labs(title = "Minneapolis Annual Crime Count", color = "Offense", y = "Count", x = "Year")+
scale_color_manual(values = c("#024D72", "#6FA1B7", "#D07061"))
saintpaulcrime <- read_csv("Data/Crime/Crime_Incident_Report_2023.csv")
saintpaulcrime %>%
mutate(year = as.numeric(substr(DATE, 1, 4))) %>%
filter(year != 2014, year!=2023) %>%
mutate(OffenseCat = case_when(INCIDENT %in% c("Theft", "Burglary", "Vandalism", "Narcotics", "Criminal Damage", "Graffiti", "THEFT") ~ "Theft",
INCIDENT == "Auto Theft" ~ "Auto Theft",
INCIDENT %in% c("Simple Asasult Dom.", "Robbery", "Agg. Assault", "Agg. Assault Dom.", "Rape", "Arson", "Simple Assault Dom.", "Simple Assault Dom", "Homicide", "Agg. Assault Dom") ~ "Violent",
TRUE ~ "random")) %>%
filter(OffenseCat != "random") %>%
count(OffenseCat, year) %>%
ggplot(aes(x=as.numeric(year), y=n, color = OffenseCat))+
geom_point()+
geom_line()+
theme_classic()+
scale_x_continuous(breaks = c(2015, 2017, 2019, 2021))+
scale_y_continuous(labels = scales::comma)+
labs(title = "Saint Paul Annual Crime Count", color = "Offense", y = "Count", x = "Year")+
scale_color_manual(values = c("#024D72", "#6FA1B7", "#D07061"))+
theme(plot.title.position = "plot",
plot.title = element_text(family = "mono"),
legend.text = element_text(family = "mono"),
legend.title = element_text(family = "mono"),
axis.title = element_text(family = "mono"),
axis.text = element_text(family = "mono"))
saintpaulcrime <- read_csv("Data/Crime/Crime_Incident_Report_2023.csv")
saintpaulcrime %>%
mutate(year = as.numeric(substr(DATE, 1, 4))) %>%
filter(year != 2014, year!=2023) %>%
mutate(OffenseCat = case_when(INCIDENT %in% c("Theft", "Burglary", "Vandalism", "Narcotics", "Criminal Damage", "Graffiti", "THEFT") ~ "Theft",
INCIDENT == "Auto Theft" ~ "Auto Theft",
INCIDENT %in% c("Simple Asasult Dom.", "Robbery", "Agg. Assault", "Agg. Assault Dom.", "Rape", "Arson", "Simple Assault Dom.", "Simple Assault Dom", "Homicide", "Agg. Assault Dom") ~ "Violent",
TRUE ~ "random")) %>%
filter(OffenseCat != "random") %>%
count(OffenseCat, year) %>%
ggplot(aes(x=as.numeric(year), y=n, color = OffenseCat))+
geom_point()+
geom_line()+
scale_x_continuous(breaks = c(2015, 2017, 2019, 2021))+
scale_y_continuous(labels = scales::comma)+
labs(title = "Saint Paul Annual Crime Count", color = "Offense", y = "Count", x = "Year")+
scale_color_manual(values = c("#024D72", "#6FA1B7", "#D07061"))
tract_aggregated_sp %>%
filter(year %in% c(2020)) %>%
mutate(violentD= case_when(Violent <=10 ~ "0-10",
Violent >10 & Violent  <=25 ~ "11-25",
Violent >25 & Violent <= 50 ~ "26-50",
Violent >50 & Violent <= 100 ~ "51-100",
TRUE ~ "101+")) %>%
mutate(violentD= fct_relevel(violentD, levels = c("0-10", "11-25", "26-50", "51-100", "101+"))) %>%
ggplot()+
geom_sf(aes(fill = violentD))+
scale_fill_brewer(palette = "Blues")+
theme_classic()+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust=0.5, family = "mono"),
strip.background = element_blank(),
legend.title = element_text(family = "mono"),
legend.text = element_text(family = "mono"),
strip.text = element_text(family = "mono"))+
labs(title = "Recorded violent crime counts by census tract in 2020", fill = "Count")
tract_aggregated_sp %>%
filter(year %in% c(2020)) %>%
mutate(theftD= case_when(Theft <=90 ~ "38-90",
Theft >90 & Theft  <=130 ~ "91-130",
Theft >130 & Theft <= 200 ~ "131-200",
TRUE ~ "201+")) %>%
mutate(theftD= fct_relevel(theftD, levels = c("38-90", "91-130", "131-200", "201+"))) %>%
ggplot()+
geom_sf(aes(fill = theftD))+
scale_fill_brewer(palette = "Blues")+
theme_classic()+
#annotate("point", x = -93.2277, y = 44.974, colour = "white", size = 1) +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust=0.5, family = "mono"),
strip.background = element_blank(),
legend.title = element_text(family = "mono"),
legend.text = element_text(family = "mono"),
strip.text = element_text(family = "mono"))+
labs(title = "Recorded theft counts by census tract in 2020", fill = "Count", x = "", y="")
tract_aggregated_sp %>%
filter(year %in% c(2020)) %>%
mutate(violentD= case_when(Violent <=10 ~ "0-10",
Violent >10 & Violent  <=25 ~ "11-25",
Violent >25 & Violent <= 50 ~ "26-50",
Violent >50 & Violent <= 100 ~ "51-100",
TRUE ~ "101+")) %>%
mutate(violentD= fct_relevel(violentD, levels = c("0-10", "11-25", "26-50", "51-100", "101+"))) %>%
ggplot()+
geom_sf(aes(fill = violentD))+
scale_fill_brewer(palette = "Blues")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust=0.5),
strip.background = element_blank())+
labs(title = "Recorded violent crime counts by census tract in 2020", fill = "Count")
tract_aggregated_sp %>%
filter(year %in% c(2020)) %>%
mutate(theftD= case_when(Theft <=90 ~ "38-90",
Theft >90 & Theft  <=130 ~ "91-130",
Theft >130 & Theft <= 200 ~ "131-200",
TRUE ~ "201+")) %>%
mutate(theftD= fct_relevel(theftD, levels = c("38-90", "91-130", "131-200", "201+"))) %>%
ggplot()+
geom_sf(aes(fill = theftD))+
scale_fill_brewer(palette = "Blues")+
theme_classic()+
#annotate("point", x = -93.2277, y = 44.974, colour = "white", size = 1) +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust=0.5),
strip.background = element_blank())+
labs(title = "Recorded theft counts by census tract in 2020", fill = "Count", x = "", y="")
tract_aggregated_sp %>%
filter(year %in% c(2020)) %>%
mutate(theftD= case_when(Theft <=90 ~ "38-90",
Theft >90 & Theft  <=130 ~ "91-130",
Theft >130 & Theft <= 200 ~ "131-200",
TRUE ~ "201+")) %>%
mutate(theftD= fct_relevel(theftD, levels = c("38-90", "91-130", "131-200", "201+"))) %>%
ggplot()+
geom_sf(aes(fill = theftD))+
scale_fill_brewer(palette = "Blues")+
#annotate("point", x = -93.2277, y = 44.974, colour = "white", size = 1) +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust=0.5),
strip.background = element_blank())+
labs(title = "Recorded theft counts by census tract in 2020", fill = "Count", x = "", y="")
tract_aggregated_sp %>%
filter(year %in% c(2020)) %>%
mutate(violentD= case_when(Violent <=10 ~ "0-10",
Violent >10 & Violent  <=25 ~ "11-25",
Violent >25 & Violent <= 50 ~ "26-50",
Violent >50 & Violent <= 100 ~ "51-100",
TRUE ~ "101+")) %>%
mutate(violentD= fct_relevel(violentD, levels = c("0-10", "11-25", "26-50", "51-100", "101+"))) %>%
ggplot()+
geom_sf(aes(fill = violentD))+
scale_fill_brewer(palette = "Blues")+
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(hjust=0.5),
strip.background = element_blank())+
labs(title = "Recorded violent crime counts by census tract in 2020", fill = "Count")
shiny::runApp('Desktop/MACStats/ProjectsDS/vivian-erin-456/project/erinPFAS')
runApp('Desktop/MACStats/ProjectsDS/vivian-erin-456/project/erinPFAS')
runApp('Desktop/MACStats/ProjectsDS/vivian-erin-456/project/erinPFAS')
runApp('Desktop/MACStats/ProjectsDS/vivian-erin-456/project/erinPFAS')
