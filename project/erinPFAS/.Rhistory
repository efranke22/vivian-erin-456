geom_line()+
labs(y = "Total Recycling Collected")
spring2023 %>%
group_by(Date) %>%
summarize(totalRecycle = sum(Recycling, na.rm=TRUE)) %>%
ggplot(aes(x=Date, y=totalRecycle))+
geom_point()+
geom_line()+
labs(y = "Total Recycling Collected")
spring2023 %>%
group_by(Date) %>%
summarize(totalTrash = sum(Trash, na.rm=TRUE)) %>%
ggplot(aes(x=Date, y=totalTrash))+
geom_point()+
geom_line()+
labs(y = "Total Trash Collected")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(foreign)
expeditions <- read.dbf("HIMDATA/exped.DBF")
members <- read.dbf("HIMDATA/members.DBF")
peaks <- read.dbf("HIMDATA/peaks.DBF")
members <- members %>%
filter(PEAKID %in% c("EVER", "AMAD", "CHOY", "MANA", "DHA1", "LHOT", "MAKA"))
members %>%
count(MO2USED, MSUCCESS) %>%
pivot_wider(id_cols = MSUCCESS, names_from = MO2USED, values_from =n) %>%
rename("NoOxygen" = "FALSE",
"YesOxygen" = "TRUE") %>%
mutate(percOxygen = round(YesOxygen/(YesOxygen+NoOxygen), 3))
members %>%
count(MSUCCESS)
members %>%
group_by(MSUCCESS, PEAKID) %>%
count() %>%
pivot_wider(id_cols = PEAKID, names_from = MSUCCESS, values_from = n) %>%
rename("Failure" = "FALSE",
"Success" = "TRUE") %>%
mutate(percSuccess = round(Success/(Success+Failure), 3))
members %>%
group_by(PEAKID, MO2USED) %>%
count() %>%
pivot_wider(id_cols = PEAKID, names_from = MO2USED, values_from = n) %>%
rename("NoOxygen" = "FALSE",
"YesOxygen" = "TRUE") %>%
mutate(percOxygen = round(YesOxygen/(YesOxygen+NoOxygen), 3))
members %>%
ggplot(aes(x=CALCAGE, fill = MO2USED))+
geom_density(alpha=0.4)
members %>%
ggplot(aes(x=CALCAGE, fill=MSUCCESS))+
geom_density(alpha=0.4)
members %>%
group_by(MO2USED, MSEASON) %>%
count() %>%
pivot_wider(id_cols = MSEASON, names_from = MO2USED, values_from = n) %>%
rename("NoOxygen" = "FALSE",
"YesOxygen" = "TRUE") %>%
mutate(percOxygen = round(YesOxygen/(YesOxygen+NoOxygen), 3))
members %>%
group_by(MSUCCESS, MSEASON) %>%
count() %>%
pivot_wider(id_cols = MSEASON, names_from = MSUCCESS, values_from = n) %>%
rename("Failure" = "FALSE",
"Success" = "TRUE") %>%
mutate(percSuccess = round(Success/(Success+Failure), 3))
members %>%
filter(SEX != "X") %>%
group_by(MO2USED, SEX) %>%
count() %>%
pivot_wider(id_cols = SEX, names_from = MO2USED, values_from = n) %>%
rename("NoOxygen" = "FALSE",
"YesOxygen" = "TRUE") %>%
mutate(percOxygen = round(YesOxygen/(YesOxygen+NoOxygen), 3))
members %>%
filter(SEX != "X") %>%
group_by(MSUCCESS, SEX) %>%
count() %>%
pivot_wider(id_cols = SEX, names_from = MSUCCESS, values_from = n) %>%
rename("Failure" = "FALSE",
"Success" = "TRUE") %>%
mutate(percSuccess = round(Success/(Success+Failure), 3))
members %>%
count(LEADER)
members %>%
group_by(MO2USED, LEADER) %>%
count() %>%
pivot_wider(id_cols = LEADER, names_from = MO2USED, values_from = n) %>%
rename("NoOxygen" = "FALSE",
"YesOxygen" = "TRUE") %>%
mutate(percOxygen = round(YesOxygen/(YesOxygen+NoOxygen), 3))
members %>%
group_by(MSUCCESS, LEADER) %>%
count() %>%
pivot_wider(id_cols = LEADER, names_from = MSUCCESS, values_from = n) %>%
rename("Failure" = "FALSE",
"Success" = "TRUE") %>%
mutate(percSuccess = round(Success/(Success+Failure), 3))
members %>%
filter(SEX != "X") %>%
group_by(PEAKID, SEX) %>%
count()
members %>%
filter(SEX != "X") %>%
group_by(PEAKID, SEX) %>%
count() %>%
pivot_wider(id_cols = PEAKID, names_from = SEX, values_from = n)
members %>%
filter(SEX != "X") %>%
group_by(PEAKID, SEX) %>%
count() %>%
pivot_wider(id_cols = PEAKID, names_from = SEX, values_from = n) %>%
mutate(percM = round(M/(M+F), 3))
members %>%
group_by(MO2USED, LEADER) %>%
count() %>%
pivot_wider(id_cols = LEADER, names_from = MO2USED, values_from = n) %>%
rename("NoOxygen" = "FALSE",
"YesOxygen" = "TRUE") %>%
mutate(percOxygen = round(YesOxygen/(YesOxygen+NoOxygen), 3))
members %>%
group_by(MSUCCESS, LEADER) %>%
count() %>%
pivot_wider(id_cols = LEADER, names_from = MSUCCESS, values_from = n) %>%
rename("Failure" = "FALSE",
"Success" = "TRUE") %>%
mutate(percSuccess = round(Success/(Success+Failure), 3))
members %>%
count(STATUS) %>%
arrange(desc(n))
members %>%
group_by(MSUCCESS, INJURY) %>%
count()
members %>%
group_by(MSUCCESS, INJURY) %>%
count() %>%
pivot_wider(id_cols = INJURY, names_from = MSUCCESS, values_from = n) %>%
rename("Failure" = "FALSE",
"Success" = "TRUE") %>%
mutate(percSuccess = round(Success/(Success+Failure), 3))
members %>%
group_by(MO2USED, INJURY) %>%
count() %>%
pivot_wider(id_cols = INJURY, names_from = MO2USED, values_from = n) %>%
rename("Failure" = "FALSE",
"Success" = "TRUE") %>%
mutate(percSuccess = round(Success/(Success+Failure), 3))
members %>%
group_by(MO2USED, DEATH) %>%
count() %>%
pivot_wider(id_cols = INJURY, names_from = MO2USED, values_from = n) %>%
rename("Failure" = "FALSE",
"Success" = "TRUE") %>%
mutate(percSuccess = round(Success/(Success+Failure), 3))
members %>%
group_by(MO2USED, DEATH) %>%
count() %>%
pivot_wider(id_cols = INJURY, names_from = MO2USED, values_from = n) %>%
mutate(percSuccess = round(Success/(Success+Failure), 3))
members %>%
group_by(MO2USED, DEATH) %>%
count() %>%
pivot_wider(id_cols = DEATH, names_from = MO2USED, values_from = n) %>%
mutate(percSuccess = round(Success/(Success+Failure), 3))
members %>%
group_by(MO2USED, DEATH) %>%
count() %>%
pivot_wider(id_cols = DEATH, names_from = MO2USED, values_from = n)
members %>%
group_by(MO2USED, DEATH) %>%
count() %>%
pivot_wider(id_cols = DEATH, names_from = MO2USED, values_from = n) %>%
mutate(percSuccess = round(`TRUE`/(`FALSE`+`TRUE`), 3))
members %>%
group_by(MO2USED, DEATH) %>%
count() %>%
pivot_wider(id_cols = DEATH, names_from = MO2USED, values_from = n) %>%
mutate(percOxygen = round(`TRUE`/(`FALSE`+`TRUE`), 3))
members %>%
group_by(MSUCCESS, MTRAVERSE) %>%
count() %>%
pivot_wider(id_cols = MTRAVERSE, names_from = MSUCCESS, values_from = n) %>%
rename("Failure" = "FALSE",
"Success" = "TRUE") %>%
mutate(percSuccess = round(Success/(Success+Failure), 3))
ggplot(members, aes(x = factor(PEAKID), fill = factor(MSUCCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(SEASON))
ggplot(members, aes(x = factor(PEAKID), fill = factor(MSUCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(SEASON))
ggplot(members, aes(x = factor(PEAKID), fill = factor(MSUCCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(MSEASON))
ggplot(members %>% filter(season %in% c(1, 3)), aes(x = factor(PEAKID), fill = factor(MSUCCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(MSEASON))
ggplot(members %>% filter(MSEASON %in% c("1", "3")), aes(x = factor(PEAKID), fill = factor(MSUCCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(MSEASON))
ggplot(members %>% filter(MSEASON %in% c("1", "3")), aes(x = factor(SEX), fill = factor(MSUCCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(MSEASON))
ggplot(members %>% filter(MPEAK %in% c("1", "3")), aes(x = factor(SEX), fill = factor(MSUCCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(MSEASON))
ggplot(members, aes(x = factor(MPEAKID), fill = factor(MSUCCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(MSEX))
ggplot(members, aes(x = factor(MPEAKID), fill = factor(MSUCCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(SEX))
ggplot(members, aes(x = factor(PEAKID), fill = factor(MSUCCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(SEX))
ggplot(members, aes(x = factor(MSEASON), fill = factor(MSUCCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(SEX))
ggplot(members %>% filter(SEX != "X"), aes(x = factor(PEAKID), fill = factor(MSUCCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(SEX))
ggplot(members %>% filter(SEX != "X"), aes(x = factor(MSEASON), fill = factor(MSUCCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(SEX))
members %>%
group_by(MSEASON, INJURY) %>%
count() %>%
pivot_wider(id_cols = INJURY, names_from = MSEASON, values_from = n)
members %>%
group_by(MSEASON, INJURY) %>%
count() %>%
pivot_wider(id_cols = MSEASON, names_from = INJURY, values_from = n)
members %>%
group_by(MSEASON, INJURY) %>%
count() %>%
pivot_wider(id_cols = MSEASON, names_from = INJURY, values_from = n) %>%
rename("No injury" = "FALSE",
"Injury" = "TRUE") %>%
mutate(percInjury = round(Injury/(Injury+`No injury`), 3))
members %>%
group_by(PEAKID, INJURY) %>%
count() %>%
pivot_wider(id_cols = PEAKID, names_from = INJURY, values_from = n) %>%
rename("No injury" = "FALSE",
"Injury" = "TRUE") %>%
mutate(percInjury = round(Injury/(Injury+`No injury`), 3))
members %>%
filter(MSEASON %in% c("1", "3")) %>%
group_by(MSEASON, PEAKID) %>%
count() %>%
pivot_wider(id_cols = PEAKID, names_from = MSEASON, values_from = n)
members %>%
filter(MSEASON %in% c("1", "3")) %>%
group_by(MSEASON, PEAKID) %>%
count() %>%
pivot_wider(id_cols = PEAKID, names_from = MSEASON, values_from = n) %>%
rename("Spring" = `1`,
"Fall" = `3`) %>%
mutate(percSpring = round(Spring/(Spring+Fall), 3))
members %>%
mutate(climber = case_when(STATUS == "Climber" ~ "climber",
TRUE ~ "non-climber"))
members %>%
mutate(climber = case_when(STATUS == "Climber" ~ "climber",
TRUE ~ "non-climber")) %>%
group_by(PEAKID, climber) %>%
count() %>%
pivot_wider(id_cols = PEAKID, names_from = climber, values_from = n) %>%
mutate(percClimber = round(climber/(climber+`non-climber`), 3))
members %>%
group_by(MO2USED, INJURY) %>%
count() %>%
pivot_wider(id_cols = INJURY, names_from = MO2USED, values_from = n) %>%
rename("Failure" = "FALSE",
"Success" = "TRUE") %>%
mutate(percSuccess = round(Success/(Success+Failure), 3))
members %>%
group_by(MO2USED, INJURY) %>%
count() %>%
pivot_wider(id_cols = INJURY, names_from = MO2USED, values_from = n) %>%
rename("Failure" = "FALSE",
"Success" = "TRUE") %>%
mutate(percOxygen = round(Success/(Success+Failure), 3))
ggplot(members %>% filter(MSEASON %in% c("1", "3")), aes(x = factor(PEAKID), fill = factor(MSUCCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(MSEASON))
members %>%
filter(MSEASON %in% c("1", "3")) %>%
group_by(MSEASON, PEAKID) %>%
count() %>%
pivot_wider(id_cols = PEAKID, names_from = MSEASON, values_from = n) %>%
rename("Spring" = `1`,
"Fall" = `3`) %>%
mutate(percSpring = round(Spring/(Spring+Fall), 3))
ggplot(members %>% filter(MSEASON %in% c("1", "3")), aes(x = factor(PEAKID), fill = factor(MO2USED))) +
geom_bar(position = "fill") +
facet_grid(~factor(MSEASON))
ggplot(members %>% filter(SEX != "X"), aes(x = factor(PEAKID), fill = factor(MO2USED))) +
geom_bar(position = "fill") +
facet_grid(~factor(SEX))
ggplot(members %>% filter(SEX != "X"), aes(x = factor(MO2USED), fill = factor(MSUCCESS))) +
geom_bar(position = "fill") +
facet_grid(~factor(SEX))
ggplot(members %>% filter(SEX != "X"), aes(x = factor(PEAKID), fill = factor(MO2USED))) +
geom_bar(position = "fill") +
facet_grid(~factor(SEX))
ggplot(members %>% filter(SEX != "X"), aes(x = factor(MSEASON), fill = factor(M02USED))) +
geom_bar(position = "fill") +
facet_grid(~factor(SEX))
ggplot(members %>% filter(SEX != "X"), aes(x = factor(PEAKID), fill = factor(MO2USED))) +
geom_bar(position = "fill") +
facet_grid(~factor(SEX))
ggplot(members %>% filter(SEX != "X"), aes(x = factor(MSEASON), fill = factor(MO2USED))) +
geom_bar(position = "fill") +
facet_grid(~factor(SEX))
knitr::opts_chunk$set(echo = TRUE)
pfas <- read_xlsx("../data/Twin Cities PFAS Data Ticket WO00000021224685.xlsx", sheet=2)
library(tidyverse)
library(skimr)
library(readxl)
library(sf)
library(USAboundaries)
pfas <- read_xlsx("../data/Twin Cities PFAS Data Ticket WO00000021224685.xlsx", sheet=2)
counties <- us_counties(resolution = "high", states = c("Minnesota", "Wisconsin")) %>%
st_transform(crs = 6783)
rivers <- read_sf('../data/shp_water_lakes_rivers') %>%
st_transform(crs = 6783)
load("../data/superfund_site_data/superfund.rds")
pfas7 <- pfas %>%
filter(CHEMICAL_NAME %in% c("Perfluorobutanoic acid", "Perfluorooctanoic acid", "Perfluoropentanoic acid", "Perfluorohexanoic acid", "Perfluorooctane sulfonate", "Perfluorohexane sulfonate", "Perfluorobutane sulfonate")) %>%
mutate(commonName = case_when(CHEMICAL_NAME == "Perfluorobutanoic acid" ~ "PFBA",
CHEMICAL_NAME == "Perfluorooctanoic acid" ~ "PFOA",
CHEMICAL_NAME == "Perfluoropentanoic acid" ~ "PFPeA",
CHEMICAL_NAME == "Perfluorohexanoic acid" ~ "PFHxA",
CHEMICAL_NAME == "Perfluorooctane sulfonate" ~ "PFOS",
CHEMICAL_NAME == "Perfluorohexane sulfonate" ~ "PFHxS",
CHEMICAL_NAME == "Perfluorobutane sulfonate" ~ "PFBS")) %>%
mutate(LOC_TYPE_2 = case_when(LOC_TYPE_2 == "Well-DOmestic" ~ "Well-Domestic",
TRUE ~ LOC_TYPE_2))
View(superfund)
shiny::runApp('Desktop/MACStats/ProjectsDS/vivian-erin-456/project/pfasTwinCities')
runApp('Desktop/MACStats/ProjectsDS/vivian-erin-456/project/pfasTwinCities')
runApp('Desktop/MACStats/ProjectsDS/vivian-erin-456/project/pfasTwinCities')
runApp('Desktop/MACStats/ProjectsDS/vivian-erin-456/project/erinPFAS')
counties <- us_counties(resolution = "high", states = c("Minnesota", "Wisconsin")) %>%
st_transform(crs = 6783)
rivers <- read_sf('../../data/shp_water_lakes_rivers') %>%
st_transform(crs = 6783)
setwd("~/Desktop/MACStats/ProjectsDS/vivian-erin-456/project/erinPFAS")
rivers <- read_sf('../../data/shp_water_lakes_rivers') %>%
st_transform(crs = 6783)
load("../../data/superfund_site_data/superfund.rds")
View(superfund)
knitr::opts_chunk$set(echo = TRUE)
superfund %>%
mutate(year = as.numeric(substr(SAMPLE_DATE,7,11)))
superfund <- superfund %>%
mutate(year = as.numeric(substr(SAMPLE_DATE,7,11)))
knitr::opts_chunk$set(echo = TRUE)
superfund_loc <- superfund %>%
filter(!is.na(LATITUDE), !is.na(LONGITUDE), LATITUDE > 44, LATITUDE < 46, LONGITUDE < -92, LONGITUDE > -94)
superfund_loc_pfas <- superfund_loc %>%
filter(ANALYTE_NAME %in% c("Perfluorohexanoic acid (PFHxA)", "Perfluorohexanesulfonate (PFHxS)", "Perfluorooctanesulfonate (PFOS)", "Perfluorooctanoic acid (PFOA)", "Perfluoropentanoic acid (PFPeA)", "Perfluorobutanesulfonate (PFBS)", "Perfluorobutanoic acid (PFBA)"))
superfund_loc <- st_as_sf(superfund_loc, coords = c("LONGITUDE", "LATITUDE"), crs = 6783)
superfund_loc_pfas <- st_as_sf(superfund_loc_pfas, coords = c("LONGITUDE", "LATITUDE"), crs = 6783)
counties_cropped <- st_crop(counties, xmin = -93.7, xmax=-92.6, ymin = 44.7, ymax=45.2)
ggplot()+
geom_sf(data = counties_cropped, color = "navajowhite", fill = "ivory", size = 0.5)+
geom_sf(data = superfund_loc, size= 0.9, aes(color = site), alpha = 0.5)+
theme(legend.position = "none",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())+
labs(title = "Samples from superfund sites in Washington, Hennepin, and Ramsey Counties")
runApp()
runApp()
View(superfund)
runApp()
load("../../data/superfund_site_data/superfund.rds")
knitr::opts_chunk$set(echo = TRUE)
load("../../data/superfund_site_data/superfund.rds")
load("../../data/superfund_site_data/superfund.rds") %>%
head()
superfund %>%
head()
load("../../data/superfund_site_data/superfund.rds") %>%
mutate(year = as.numeric(substr(SAMPLE_DATE, 7, 11)))
superfund_loc <- superfund %>%
filter(!is.na(LATITUDE), !is.na(LONGITUDE), LATITUDE > 44, LATITUDE < 46, LONGITUDE < -92, LONGITUDE > -94) %>%
mutate(year = as.numeric(substr(SAMPLE_DATE, 7, 11)))
runApp()
runApp()
superfund_loc %>%
count(year)
superfund_loc %>%
count(year)
ggplotly(
ggplot()+
geom_sf(data = counties_cropped, color = "navajowhite", fill = "ivory", size = 0.5)+
geom_sf(data = (superfund_loc %>% filter(year == input$year)), size= 0.9, aes(color = site), alpha = 0.5)+
theme(legend.position = "none",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())+
labs(title = "Samples from superfund sites in Washington, Hennepin, and Ramsey Counties")
)
library(plotly)
ggplotly(
ggplot()+
geom_sf(data = counties_cropped, color = "navajowhite", fill = "ivory", size = 0.5)+
geom_sf(data = (superfund_loc %>% filter(year == input$year)), size= 0.9, aes(color = site), alpha = 0.5)+
theme(legend.position = "none",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())+
labs(title = "Samples from superfund sites in Washington, Hennepin, and Ramsey Counties")
)
ggplotly(
ggplot()+
geom_sf(data = counties_cropped, color = "navajowhite", fill = "ivory", size = 0.5)+
geom_sf(data = superfund_loc, size= 0.9, aes(color = site), alpha = 0.5)+
theme(legend.position = "none",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())+
labs(title = "Samples from superfund sites in Washington, Hennepin, and Ramsey Counties")
)
ggplot()+
geom_sf(data = counties_cropped, color = "navajowhite", fill = "ivory", size = 0.5)+
geom_sf(data = superfund_loc, size= 0.9, aes(color = site), alpha = 0.5)+
theme(legend.position = "none",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())+
labs(title = "Samples from superfund sites in Washington, Hennepin, and Ramsey Counties")
counties_cropped <- st_crop(counties, xmin = -93.7, xmax=-92.6, ymin = 44.7, ymax=45.2)
ggplotly(
ggplot()+
geom_sf(data = counties_cropped, color = "navajowhite", fill = "ivory", size = 0.5)+
geom_sf(data = superfund_loc, size= 0.9, aes(color = site), alpha = 0.5)+
theme(legend.position = "none",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())+
labs(title = "Samples from superfund sites in Washington, Hennepin, and Ramsey Counties")
)
ggplot()+
geom_sf(data = counties_cropped, color = "navajowhite", fill = "ivory", size = 0.5)+
geom_sf(data = superfund_loc, size= 0.9, aes(color = site), alpha = 0.5)+
theme(legend.position = "none",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())+
labs(title = "Samples from superfund sites in Washington, Hennepin, and Ramsey Counties")
superfund_loc <- superfund %>%
filter(!is.na(LATITUDE), !is.na(LONGITUDE), LATITUDE > 44, LATITUDE < 46, LONGITUDE < -92, LONGITUDE > -94) %>%
mutate(year = as.numeric(substr(SAMPLE_DATE, 7, 11)))
ggplot()+
geom_sf(data = counties_cropped, color = "navajowhite", fill = "ivory", size = 0.5)+
geom_sf(data = superfund_loc, size= 0.9, aes(color = site), alpha = 0.5)+
theme(legend.position = "none",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())+
labs(title = "Samples from superfund sites in Washington, Hennepin, and Ramsey Counties")
load("../../data/superfund_site_data/superfund.rds")
superfund_loc <- superfund %>%
filter(!is.na(LATITUDE), !is.na(LONGITUDE), LATITUDE > 44, LATITUDE < 46, LONGITUDE < -92, LONGITUDE > -94) %>%
mutate(year = as.numeric(substr(SAMPLE_DATE, 7, 11)))
load("../../data/superfund_site_data/superfund.rds")
superfund_loc <- superfund %>%
filter(!is.na(LATITUDE), !is.na(LONGITUDE), LATITUDE > 44, LATITUDE < 46, LONGITUDE < -92, LONGITUDE > -94) %>%
mutate(year = as.numeric(substr(SAMPLE_DATE, 7, 11)))
counties_cropped <- st_crop(counties, xmin = -93.7, xmax=-92.6, ymin = 44.7, ymax=45.2)
ggplotly(
ggplot()+
geom_sf(data = counties_cropped, color = "navajowhite", fill = "ivory", size = 0.5)+
geom_sf(data = superfund_loc, size= 0.9, aes(color = site), alpha = 0.5)+
theme(legend.position = "none",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())+
labs(title = "Samples from superfund sites in Washington, Hennepin, and Ramsey Counties")
)
load("../../data/superfund_site_data/superfund.rds")
superfund_loc <- superfund %>%
filter(!is.na(LATITUDE), !is.na(LONGITUDE), LATITUDE > 44, LATITUDE < 46, LONGITUDE < -92, LONGITUDE > -94) %>%
mutate(year = as.numeric(substr(SAMPLE_DATE, 7, 11)))
superfund_loc <- st_as_sf(superfund_loc, coords = c("LONGITUDE", "LATITUDE"), crs = 6783)
counties_cropped <- st_crop(counties, xmin = -93.7, xmax=-92.6, ymin = 44.7, ymax=45.2)
ggplotly(
ggplot()+
geom_sf(data = counties_cropped, color = "navajowhite", fill = "ivory", size = 0.5)+
geom_sf(data = superfund_loc, size= 0.9, aes(color = site), alpha = 0.5)+
theme(legend.position = "none",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())+
labs(title = "Samples from superfund sites in Washington, Hennepin, and Ramsey Counties")
)
counties_cropped <- st_crop(counties, xmin = -93.7, xmax=-92.6, ymin = 44.7, ymax=45.2)
ggplotly(
ggplot()+
geom_sf(data = counties_cropped, color = "navajowhite", fill = "ivory", size = 0.5)+
geom_sf(data = superfund_loc, size= 0.9, aes(color = site), alpha = 0.5)+
theme(legend.position = "none",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())+
labs(title = "Samples from superfund sites in Washington, Hennepin, and Ramsey Counties")
)
1+1
